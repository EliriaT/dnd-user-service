// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: characters.sql

package db

import (
	"context"
	"encoding/json"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO "characters" (name, user_id, traits)
VALUES ($1, $2, $3)
    RETURNING id, name, user_id, traits
`

type CreateCharacterParams struct {
	Name   string          `json:"name"`
	UserID int64           `json:"user_id"`
	Traits json.RawMessage `json:"traits"`
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter, arg.Name, arg.UserID, arg.Traits)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Traits,
	)
	return i, err
}

const getCharacterByID = `-- name: GetCharacterByID :one
SELECT id, name, user_id, traits FROM "characters"
WHERE id = $1
`

func (q *Queries) GetCharacterByID(ctx context.Context, id int64) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacterByID, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Traits,
	)
	return i, err
}

const getCharactersByUserID = `-- name: GetCharactersByUserID :many
SELECT id, name, user_id, traits FROM "characters"
WHERE user_id = $1
`

func (q *Queries) GetCharactersByUserID(ctx context.Context, userID int64) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, getCharactersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Traits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
